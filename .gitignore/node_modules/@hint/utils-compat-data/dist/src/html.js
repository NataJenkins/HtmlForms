"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const browser_compat_data_1 = require("./browser-compat-data");
const browsers_1 = require("./browsers");
const cache_1 = require("./cache");
const helpers_1 = require("./helpers");
exports.getAttributeUnsupported = (feature, browsers) => {
    const key = `html-attribute:${feature.element || ''}|${feature.attribute}|${feature.value || ''}`;
    return cache_1.getCachedValue(key, browsers, () => {
        let data;
        let prefix = '';
        let unprefixed = '';
        if (feature.element) {
            const [elementData] = helpers_1.getFeatureData(browser_compat_data_1.mdn.html.elements, feature.element);
            [data, prefix, unprefixed] = helpers_1.getFeatureData(elementData, feature.attribute);
        }
        if (!data) {
            [data, prefix, unprefixed] = helpers_1.getFeatureData(browser_compat_data_1.mdn.html.global_attributes, feature.attribute);
        }
        if (feature.value) {
            [data, prefix, unprefixed] = helpers_1.getFeatureData(data, feature.value);
            if (!data && feature.element === 'input' && feature.attribute === 'type') {
                [data, prefix, unprefixed] = helpers_1.getFeatureData(browser_compat_data_1.mdn.html.elements.input, `input-${feature.value}`);
            }
        }
        return browsers_1.getUnsupportedBrowsers(data, prefix, browsers, unprefixed);
    });
};
exports.getElementUnsupported = (feature, browsers) => {
    return cache_1.getCachedValue(`html-element:${feature.element}`, browsers, () => {
        const [data, prefix, unprefixed] = helpers_1.getFeatureData(browser_compat_data_1.mdn.html.elements, feature.element);
        return browsers_1.getUnsupportedBrowsers(data, prefix, browsers, unprefixed);
    });
};
