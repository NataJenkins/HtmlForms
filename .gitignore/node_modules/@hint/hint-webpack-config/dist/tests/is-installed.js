"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const mock = require("mock-require");
const utils_tests_helpers_1 = require("@hint/utils-tests-helpers");
const utils_fs_1 = require("@hint/utils-fs");
const utils_types_1 = require("@hint/utils-types");
const webpackDestPath = path.join(__dirname, 'fixtures', 'valid', 'package.json');
const webpackConfig = utils_fs_1.loadJSONFile(webpackDestPath);
const hintPath = utils_tests_helpers_1.getHintPath(__filename, true);
const tests = [
    {
        before() {
            const loadPackage = () => {
                return webpackConfig;
            };
            mock('@hint/utils/dist/src/packages/load-package', { loadPackage });
        },
        name: 'If valid configuration file exists and webpack is installed should pass',
        path: path.join(__dirname, 'fixtures', 'valid')
    },
    {
        before() {
            const loadPackage = () => {
                throw new Error('error');
            };
            mock('@hint/utils/dist/src/packages/load-package', { loadPackage });
        },
        name: 'If valid configuration file exists but webpack is not installed should fail',
        path: path.join(__dirname, 'fixtures', 'valid'),
        reports: [{
                message: `webpack is not installed in your project.`,
                severity: utils_types_1.Severity.warning
            }]
    }
];
utils_tests_helpers_1.testLocalHint(hintPath, tests, {
    parsers: ['webpack-config'],
    serial: true
});
