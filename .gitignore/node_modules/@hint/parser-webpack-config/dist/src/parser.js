"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const hint_1 = require("hint");
const utils_network_1 = require("@hint/utils-network");
class WebpackConfigParser extends hint_1.Parser {
    constructor(engine) {
        super(engine, 'webpack-config');
        this.configFound = false;
        engine.on('fetch::end::script', this.parseWebpack.bind(this));
        engine.on('scan::end', this.parseEnd.bind(this));
    }
    async parseEnd() {
        if (!this.configFound) {
            await this.engine.emitAsync('parse::error::webpack-config::not-found', {
                error: new Error('webpack.config.js was not found'),
                resource: ''
            });
        }
    }
    async getLocallyInstalledWebpack() {
        try {
            const packageJSON = (await Promise.resolve().then(() => require('@hint/utils/dist/src/packages/load-package'))).loadPackage(path.join(process.cwd(), 'node_modules', 'webpack'));
            return packageJSON.version;
        }
        catch (err) {
            return null;
        }
    }
    async parseWebpack(fetchEnd) {
        const resource = fetchEnd.resource;
        const fileName = path.basename(resource);
        if (fileName !== 'webpack.config.js') {
            return;
        }
        this.configFound = true;
        await this.engine.emitAsync(`parse::start::webpack-config`, { resource });
        try {
            const config = await Promise.resolve().then(() => require(utils_network_1.asPathString(utils_network_1.getAsUri(resource))));
            const version = await this.getLocallyInstalledWebpack();
            if (!version) {
                await this.engine.emitAsync('parse::error::webpack-config::not-install', {
                    error: new Error('webpack is not installed'),
                    resource
                });
                return;
            }
            await this.engine.emitAsync('parse::end::webpack-config', {
                config,
                resource,
                version
            });
        }
        catch (err) {
            await this.engine.emitAsync('parse::error::webpack-config::configuration', {
                error: err,
                resource
            });
        }
    }
}
exports.default = WebpackConfigParser;
